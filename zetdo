#!/bin/sh

mkgroup() {
    weewiki zet mkgroup $1 > /dev/null
    weewiki zet link @$1 @zetdo > /dev/null
}

grouplist() {
    weewiki zet var list state @$1 | \
        awk -F '\t' \
            '$3 ~ /^>/ {print substr($2, 0, 8), $1, substr($3, 2)}'
}

setstate() {
    weewiki zet var link $1 state @$2
}

history() {
UUID=$(weewiki zet resolve $1)
if [[ $# -eq 1 ]]
then
sqlite3 a.db <<EOF
.mode tabs
SELECT datetime(time, "localtime"), substr(value, 2) from wikizet
WHERE UUID IN
(SELECT UUID from wikizet where value like "#$UUID")
and VALUE like ">%"
ORDER BY strftime("%s", time) ASC;
EOF
else
sqlite3 a.db <<EOF
.mode tabs
SELECT datetime(time, "localtime") as time_local,
substr(value, 2) from wikizet
WHERE UUID IN
(SELECT UUID from wikizet where value like "#$UUID")
and VALUE like ">%"
and strftime('%Y-%m-%d', time_local) BETWEEN '$2' AND '$3'
ORDER BY strftime("%s", time_local) ASC;
EOF
fi
}

if [[ "$#" -eq 0 ]]
then
    echo "Enter a command."
    exit 1
fi

case $1 in
    "create")
        weewiki create
        weewiki zet mkgroup zetdo > /dev/null
        mkgroup TODO
        mkgroup DONE
        mkgroup WIP
        mkgroup WAIT
        ;;
    "add")
        read -p "say: " answer
        UUID=$(weewiki zet rawsay "$answer" @zetdo)
        weewiki zet var new $UUID state
        weewiki zet var link $UUID state @TODO
        echo $UUID
        ;;
    "tasks")
        if [[ "$#" -eq 1 ]]
        then
            grouplist TODO
            exit 1
        else
            grouplist $2
        fi
        ;;
    "done")
        if [[ ! "$#" -eq 2 ]]
        then
            echo "Usage: done uuid"
            exit 1
        fi
        setstate $2 DONE
        ;;
    "set")
        if [[ ! "$#" -eq 3 ]]
        then
            echo "Usage: set uuid group"
            exit 1
        fi
        setstate $2 $3
        ;;
    "ls")
        grouplist $2
        ;;
    "comment")
        weewiki zet resolve $2 > /dev/null
        if [[ $? -eq 0 ]]
        then
            read -p "comment: " answer
            weewiki zet rawsay "$answer" @zetdo $2 > /dev/null
        fi
        ;;
    "history")
        if [[ $# -eq 1 ]]
        then
            echo "Usage: history UUID [start end]"
            exit 1
        fi

        if [[ $# -eq 2 ]]
        then
            history $2
        else
            if [[ $3 -eq "today" ]]
            then
                today=$(date +"%Y-%m-%d")
                history $2 $today $today
            else
                history $2 $3 $4
            fi
        fi

        ;;
    "export")
        weewiki zet export zetdo
        ;;
    "rebuild")

        if [[ $# -eq 1 ]]
        then
            echo "Usage: rebuild file.tsv"
            exit 1
        fi
        if [[ -e "a.db" ]]
        then
            weewiki clear
            weewiki vacuum
        else
            weewiki create
        fi

        weewiki zet import < $2
        ;;
    "mkgroup")
        if [[ $# -eq 1 ]]
        then
            echo "Usage: mkgroup GROUP"
            exit 1
        fi
        mkgroup $2
        ;;
    "tag")
        if [[ $# -lt 2 ]]
        then
            echo "Usage: link UUID GROUP"
            exit 1
        fi
        weewiki zet link $2 @$3
        ;;
    "entry")
        if [[ $# -eq 1 ]]
        then
            echo "Usage: entry UUID"
            exit 1
        fi
        weewiki zet entry $2 | cut -f 1,3 | grep -v "^-"
        ;;
    "blurb")
        if [[ $# -eq 1 ]]
        then
            echo "Usage: blurb UUID"
            exit 1
        fi
        weewiki zet var new $2 blurb
        weewiki zet var set $2 blurb
        ;;
    *)
        echo "Could not find command '$1'"
        ;;
esac
